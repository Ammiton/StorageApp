#!/bin/bash

export BASE_DIR=${PWD}/
#PYTHON_VERSION="Python 3.*"

source ../.bashrc
source ../az_intf

if [ -f "python_version.tmp" ]; then
	rm -rf python_version.tmp
fi

python3 -m venv .storage-env
source .storage-env/bin/activate

python3 --version > python_version.tmp

echo "Python version Checked"
rm -rf python_version.tmp
	
if [ -f venv.tmp ] ; then
	rm -rf venv.tmp
fi
	
echo "$VIRTUAL_ENV" | sed -e 's/\/.*\///g' > venv.tmp
if [ ! -s venv.tmp ]; then
	echo "FAILED : Virtual env not installed"
	echo "To install virtual env run apt install python3.8-venv"
	echo "FAILED"
	exit 1
fi
	
if [ "storage-env" != "$(cat venv.tmp)" ]; then
	source ${BASE_DIR}/.storage-env/bin/activate
	python3 -m pip install -r requirements.txt
fi
rm -rf venv.tmp

export PYTHONPATH=${PWD}/../:$PYTHONPATH

echo "Storage-env Virtual Environment activated"
echo 
# Simple arg parsing: support --no-node to skip Node dependency install when sourcing
# Example: source env-setup --no-node
NO_NODE=0
for arg in "$@"; do
	case "$arg" in
		--no-node)
			NO_NODE=1
			;;
		--help|-h)
			echo "Usage: source env-setup [--no-node]"
			return 0 2>/dev/null || exit 0
			;;
	esac
done

if [ -f package.json ]; then
	if [ "$NO_NODE" = "1" ]; then
		echo "SKIPPING: Node dependency installation (--no-node)"
	else
		if command -v npm >/dev/null 2>&1; then
			echo "npm found: installing frontend dependencies..."
			if [ -f package-lock.json ]; then
				echo "Using package-lock.json -> running: npm ci"
				npm ci || echo "npm ci failed. You can run 'npm ci' manually to inspect errors."
			else
				echo "No package-lock.json found -> running: npm install"
				npm install || echo "npm install failed. You can run 'npm install' manually to inspect errors."
			fi
		else
			echo "npm not available on PATH. To install frontend dependencies, install Node.js and npm and then run:\n  npm ci  # if you have package-lock.json\n  or\n  npm install"
		fi
	fi
fi

echo "DONE"
